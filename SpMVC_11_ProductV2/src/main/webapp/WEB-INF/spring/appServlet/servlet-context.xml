<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- tomcat이 직접 관리하지 않는 폴더를 외부에서 가상폴더로 접근할 수 있도록 만들어주는 클래스
	/context/files라는 폴더에 접근하면 로컬의 c:/bizwork/files 폴더를 접근하게 해준다 -->
	<beans:bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- location은 server, tomcat이 관리하는 폴더에 저장된다. product/html/*로 접근하면 server에 있는 html폴더로 연결해라.
	location은 실제 존재하는 폴더고 mapping 되어있는 것은 가상 directory. 외부에서 접근할 때는 mapping이 사용된다
	prj를 동작시키면 파일들이 tomcat에 업로드되어 사용된다. 같은 파일이름이 있으면 tomcat은 업로드를 거부하는데,
	?ver20191218 처럼 뒤에 숫자를 바꾸면 파일이 다른걸로 판단하여 업로드된다  -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/html/**" location="/html/" />
	<!-- files:///은 local의 경로를 직접 가리킨다. 보안에 문제가 생길 수 있으므로 최소한으로 사용해야한다
	보안때문에 tomcat은 자기가 관리하지 않는 외부폴더에 접근할 수 없게 되어있으므로 BeanNameUrlHandlerMapping class가 필요 -->
	<resources mapping="/files/**" location="files:///c:/BizWork/files/" />


	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- commons-io, commons-fileupload를 사용하여 파일을 업로드 할 때 업로드에 대한 설정을 하는 클래스
	mybatis-context.xml처럼 다른 파일로 설정하여 사용하기도 한다. beans에 bean으로 지정한다는 것만 주의
	
	maxUploadSize : 한번에 upload 할 수 있는 파일(들)의 최대 크기
	maxUploadSizePerFile : upload할 수 있는 파일 1개의 최대 크기 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="10485760"/>
		<beans:property name="maxUploadSizePerFile" value="1048576"/>
	</beans:bean>
	
	<context:component-scan base-package="com.biz.product.controller" />
	<context:component-scan base-package="com.biz.product.service" />
	
	
	
</beans:beans>
