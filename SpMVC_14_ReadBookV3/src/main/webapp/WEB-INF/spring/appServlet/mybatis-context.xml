<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/tx https://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- 암호화를 위한 bean 3개 설정. envConfig 환경설정 makeSecure할 때 했던 세팅,	configEnc는 복호화, 그 아래는 암호화 -->
	
	<bean id="envConfig" class="org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig">
		<property name="algorithm" value="PBEWithMD5AndDES"/>
		<property name="passwordEnvName" value="ORACLEPATH"/> <!-- server에 environment로 만들어둔 환경변수 ORACLEPATH
		이름으로 값을 가져와서 passwordEnvName으로 사용 -->
	</bean>
	
	<!-- 복호화하는 클래스. 해독시 필요한 값은 id가 config인 bean의 설정값을 받아와서 복호화 -->
	<bean id="configEnc" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
		<property name="config" ref="envConfig" />
	</bean>
	
	<!-- oracle.sec.properties에 설정된 변수를 가져와서 enc 메서드를 호출하여 복호화 -->
	<bean class="org.jasypt.spring31.properties.EncryptablePropertyPlaceholderConfigurer">
		<constructor-arg ref="configEnc"/>
		<property name="location" value="/WEB-INF/spring/oracle.sec.properties"/>
	</bean>
		
	<bean id="oracleDS" class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
		<property name="username" value="${oracle.username}"/><!-- ENC(암호문)의 메서드를 호출. return되는 username을 value에 -->
		<property name="password" value="${oracle.password}"/>
		
		<!-- 연결을 유지하도록 7200000 타임마다 의미없는 더미쿼리를 보내라 -->
		<property name="validationQuery" value="SELECT 1 FROM DUAL"/> <!-- Session이 끊기지 않게 한번씩 서버에 무의미한 쿼리를 요청 -->
		<property name="validationQueryTimeout" value="7200000"/>
		<property name="testWhileIdle" value="true"/>
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="oracleDS"/>
		<property name="mapperLocations" value="/WEB-INF/spring/mapper/*-mapper.xml"/>
		<!-- mapper를 sessionfactory에 올려두면 굳이 factory를 만들 필요 없이 autowired해주면 된다 -->
		<!-- scan한 곳에서 mapper를 찾아서 메서드 이름이 같은것은 자동으로 보내준다 -->
		<property name="typeAliasesPackage" value="com.biz.rbooks.domain"/>
	</bean>
	
	<bean class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory"/>
	</bean>
	
	<mybatis-spring:scan base-package="com.biz.rbooks.repository"/>

</beans>
